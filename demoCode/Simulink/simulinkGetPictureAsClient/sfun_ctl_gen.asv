/* Copyright 2003-2014 The MathWorks, Inc. */

// *******************************************************************
// **** To build this mex function use: mex sfun_cppcount_cpp.cpp ****
// *******************************************************************

#include "sfun_ctl_gen.h"

#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME  sfun_ctl_gen

// Need to include simstruc.h for the definition of the SimStruct and
// its associated macro definitions.
#include "simstruc.h"

#include <string>

#define _USE_MATH_DEFINES
#include <math.h>

// The S-function has following parameters
// 
//  track mode
enum {
    trackModeIdx = 0,
    PRMCount
};

enum {
    cycle = 0,
    line,
    square,
    eight,
    ModeCount
};

#define PRM_TrackMode(S) ((int)mxGetScalar(ssGetSFcnParam(S, trackModeIdx)));


// Function: mdlInitializeSizes ===============================================
// Abstract:
//    The sizes information is used by Simulink to determine the S-function
//    block's characteristics (number of inputs, outputs, states, etc.).
static void mdlInitializeSizes(SimStruct *S)
{
    // No expected parameters
    ssSetNumSFcnParams(S, PRMCount);

    // Parameter mismatch will be reported by Simulink
    if (ssGetNumSFcnParams(S) != ssGetSFcnParamsCount(S)) {
        return;
    }

    // Specify I/O
    if (!ssSetNumInputPorts(S, 1)) return;
    ssSetInputPortWidth(S, 0, 7);
    ssSetInputPortDirectFeedThrough(S, 0, 1);
    if (!ssSetNumOutputPorts(S, 1)) return;
    ssSetOutputPortWidth(S, 0, 2);
    
    ssSetNumSampleTimes(S, 1);

    // Reserve place for C++ object
    ssSetNumPWork(S, 3);

    ssSetOperatingPointCompliance(S, USE_CUSTOM_OPERATING_POINT);

    ssSetOptions(S,
                 SS_OPTION_WORKS_WITH_CODE_REUSE |
                 SS_OPTION_EXCEPTION_FREE_CODE |
                 SS_OPTION_DISALLOW_CONSTANT_SAMPLE_TIME);

}


// Function: mdlInitializeSampleTimes =========================================
// Abstract:
//   This function is used to specify the sample time(s) for your
//   S-function. You must register the same number of sample times as
//   specified in ssSetNumSampleTimes.
static void mdlInitializeSampleTimes(SimStruct *S)
{
    ssSetSampleTime(S, 0, INHERITED_SAMPLE_TIME);
    ssSetOffsetTime(S, 0, 0.0);
    ssSetModelReferenceSampleTimeDefaultInheritance(S); 
}

// Function: mdlStart =======================================================
// Abstract:
//   This function is called once at start of model execution. If you
//   have states that should be initialized once, this is the place
//   to do it.
#define MDL_START
static void mdlStart(SimStruct *S)
{   
    // store MoveCTl object in pointer work vector
    ssGetPWork(S)[0] = (void *) new MoveCTL;
    MoveCTL* ctl = (MoveCTL *)ssGetPWork(S)[0];
    ctl->vertical = 0;
    ctl->horizonal = 0;
    int trackMode = PRM_TrackMode(S);
    ssPrintf("track mode %d\n", trackMode);
    switch (trackMode) {
        case line:
            ctl->vertical = 1;
            break;
        case eight:
            ctl->vertical = 1;
            ctl->horizonal = 1;
        default:
            break;
    }
    // for eight track
    ssGetPWork(S)[1] = (void *) new int;
    int* eightleave = (int *)ssGetPWork(S)[1];
    *eightleave = 0;
    
    // for square track
    ssGetPWork(S)[2] = (void *) new struct MyPosture[4];
    struct MyPosture *checkpoint = (struct MyPosture *)ssGetPWork(S)[2];
}

static void QuatToEuler(struct MyQuaternion q, struct MyEulerAngles &e)
{
    e.pitch = asin(2 * q.w * q.x - 2 * q.y * q.z) * 180/M_PI;
    e.yaw   = atan2(2*q.w*q.y + 2*q.x*q.z, 1 - 2*q.x*q.x - 2*q.y*q.y) * 180/M_PI;
    e.roll  = atan2(2*q.w*q.z + 2*q.x*q.y, 1 - 2*q.x*q.x - 2*q.z*q.z) * 180/M_PI;
}
// Function: mdlOutputs =======================================================
// Abstract:
//   In this function, you compute the outputs of your S-function
//   block.
static void mdlOutputs(SimStruct *S, int_T tid)
{
    // Retrieve TCP Socket from the work pointers vector
    MoveCTL *ctl = static_cast<MoveCTL *>(ssGetPWork(S)[0]);
 
    // Get data addresses of I/O
    InputRealPtrsType  u = ssGetInputPortRealSignalPtrs(S,0);
               real_T *y = ssGetOutputPortRealSignal(S, 0);
    
    struct MyPosture currPosture;
    currPosture.myPosition.x   = *u[0];
    currPosture.myPosition.y   = *u[1];
    currPosture.myPosition.z   = *u[2];
    currPosture.myQuaternion.x = *u[3];
    currPosture.myQuaternion.y = *u[4];
    currPosture.myQuaternion.z = *u[5];
    currPosture.myQuaternion.w = *u[6];
    
    int trackMode = PRM_TrackMode(S);
    switch (trackMode) {
        case cycle:
        {
            y[0] = 1;
            y[1] = 1;
            ctl->vertical = y[0];
            ctl->horizonal = y[1];
            break;
        }
        case line:
        {
            ssPrintf("mode line, position x:%f\n", currPosture.myPosition.x);
            y[1] = ctl->horizonal; // = 0
            /*
            if (currPosture.myPosition.x < 32 && currPosture.myPosition.x  > 24) {
                y[0] = ctl->vertical;
            }
            else {
                if (currPosture.myPosition.x > 32)
                    y[0] = 1;
                else if (currPosture.myPosition.x  < 24)
                    y[0] = -1;
            }*/
            if (currPosture.myPosition.z < 9 && currPosture.myPosition.z  > 3) {
                y[0] = ctl->vertical;
            }
            else {
                if (currPosture.myPosition.z > 9)
            }
            ctl->vertical = y[0];
            ctl->horizonal = y[1];
            break;
        }
        case square:
        {
            struct MyPosture *checkpoint = static_cast<struct MyPosture *>(ssGetPWork(S)[1]);
            
            break;
        }
        case eight:
        {
            y[0] = ctl->vertical;
            y[1] = ctl->horizonal;
            
            struct MyEulerAngles e;
            QuatToEuler(currPosture.myQuaternion, e);
            ssPrintf("EulerAngles X-pitch:%f, Y-yaw:%f, Z-roll:%f\n", 
                    e.pitch, e.yaw, e.roll);
            int *eightleave = static_cast<int *>(ssGetPWork(S)[1]);
            if (0 == *eightleave ) {
                if (e.yaw > 30 || e.yaw < -30) {
                    ssPrintf("leave start\n\n\n\n");
                    *eightleave = 1;
                }
            }
            else {
                
                if (e.yaw > -30 && e.yaw < 30) {
                    ssPrintf("back start, change cycle\n\n\n\n");
                    ctl->horizonal = -ctl->horizonal;
                    y[1] = ctl->horizonal;
                    *eightleave = 0;
                }
            }
            //ctl->vertical = y[0];
            //ctl->horizonal = y[1];
            break;
        }
        default:
            y[0] = 0;
            y[1] = 0;
    }
    ssPrintf("control v:%f, h:%f\n", y[0], y[1]);
}


#ifdef MATLAB_MEX_FILE
/* Define to indicate that this S-Function has the mdlG[S]etOperatingPoint methods */
#define MDL_OPERATING_POINT

/* Function: mdlGetOperatingPoint ==================================================
 * Abstract:
 *    Save the operating point of this block and return it to Simulink 
 */
static mxArray* mdlGetOperatingPoint(SimStruct* S)
{  
//     DoubleAdder *da = static_cast<DoubleAdder*>(ssGetPWork(S)[0]);
//     return mxCreateDoubleScalar(da->GetPeak());
    return NULL;
}
/* Function: mdlSetOperatingPoint =================================================
 * Abstract:
 *   Restore the operating point of this block based on the provided data (ma)
 *   The data was saved by mdlGetOperatingPoint
 */
static void mdlSetOperatingPoint(SimStruct* S, const mxArray* ma)
{
    // Retrieve C++ object from the pointers vector
//     DoubleAdder *da = static_cast<DoubleAdder*>(ssGetPWork(S)[0]);
//     da->SetPeak(mxGetPr(ma)[0]);
}
#endif // MATLAB_MEX_FILE

// Function: mdlTerminate =====================================================
// Abstract:
//   In this function, you should perform any actions that are necessary
//   at the termination of a simulation.  For example, if memory was
//   allocated in mdlStart, this is the place to free it.
static void mdlTerminate(SimStruct *S)
{
    // Retrieve and destroy C++ object
    MoveCTL *ctl = static_cast<MoveCTL *>(ssGetPWork(S)[0]);
    delete ctl;
}


// Required S-function trailer
#ifdef  MATLAB_MEX_FILE    /* Is this file being compiled as a MEX-file? */
#include "simulink.c"      /* MEX-file interface mechanism */
#else
#include "cg_sfun.h"       /* Code generation registration function */
#endif
